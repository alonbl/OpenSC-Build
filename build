#!/bin/sh
# OpenSC Project Cross Compile Build
# Copyright (c) 2008 The OpenSC Project
# Copyright (C) 2008 Alon Bar-Lev <alon.barlev@gmail.com>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#

#
# msys:
# No environment required, unless buggy wget which needs
# full path:
# WGET=/c/msys/1.0/bin/wget
#
# Cross compile for Windows:
# CHOST=i686-pc-mingw32 CBUILD=i686-pc-linux-gnu
# Cross compile for uClibc:
# CHOST=i586-pc-linux-uclibc CBUILD=i686-pc-linux-gnu
#

die() {
	local m="$1"

	echo "FATAL: ${m}" >&2
	exit 1
}

get_my_dir() {
	local o="$(pwd)"
	cd "$(dirname "$0")"
	pwd
	cd "${o}"
}

fixup_la() {
	local f

	echo "Fixup libtool files"
	for f in "${IMAGEROOT}/"*"/lib"/*.la; do
		sed 's#//#'"$(dirname "$(dirname "$(echo "${f}" | sed 's#//#/#g')")")"'/#g' "${f}" > "${f}.tmp"
		mv "${f}.tmp" "${f}"
	done
}

restore_la() {
	local f

	echo "Restore libtool files"
	for f in "${IMAGEROOT}/"*"/lib"/*.la; do
		local x="$(echo "${IMAGEROOT}" | sed 's#/$##')"
		sed 's#'"${x}"'/[^/]*/lib#//lib#g' "${f}" > "${f}.tmp"
		mv "${f}.tmp" "${f}"
	done
}

download1() {
	local url="$1"
	local prefix="$(basename "${url}" | sed 's/-.*//g')"

	if ! [ -n "$(ls "${SOURCESROOT}/${prefix}"* 2> /dev/null)" ]; then
		"${WGET}" ${WGET_OPTS} --directory-prefix="${SOURCESROOT}" \
			"${url}" \
			|| die "Cannot download ${url}"
	fi
}

download() {
	if ! [ -e "${SOURCESROOT}" ]; then
		mkdir -p "${SOURCESROOT}" || die "Cannot create '${SOURCESROOT}'"
	fi
	download1 "http://www.zlib.net/zlib-${ZLIB_VERSION}.tar.gz"
	download1 "http://www.oberhumer.com/opensource/lzo/download/lzo-${LZO_VERSION}.tar.gz"
	download1 "http://ftp.gnu.org/gnu/libtool/libtool-${LIBTOOL_VERSION}.tar.gz"
	download1 "http://mirrors.usc.edu/pub/openssl/snapshot/openssl-${OPENSSL_VERSION}.tar.gz"
	download1 "http://www.opensc-project.org/files/opensc/openct-${OPENCT_VERSION}.tar.gz"
	download1 "http://www.opensc-project.org/files/opensc/opensc-${OPENSC_VERSION}.tar.gz"
	download1 "http://www.opensc-project.org/files/libp11/libp11-${LIP11_VERSION}.tar.gz"
	download1 "http://www.opensc-project.org/files/engine_pkcs11/engine_pkcs11-${ENGINE_PKCS11_VERSION}.tar.gz"
	download1 "http://www.opensc-project.org/files/pkcs11-helper/pkcs11-helper-${PKCS11_HELPER_VERSION}.tar.bz2"
	download1 "https://secure.openvpn.net/beta/openvpn-${OPENVPN_VERSION}.tar.gz"

	if [ "$(ls "${SOURCESROOT}" | wc -l | sed 's/[ \t]//g')" != 10 ]; then
		die "sources is unclean."
	fi
}

create_layout() {
	[ -e "${IMAGEROOT}" ] && rm -fr "${IMAGEROOT}"
	[ -e "${BUILDROOT}" ] && rm -fr "${BUILDROOT}"

	mkdir -p "${IMAGEROOT}" || die "Cannot create '${IMAGEROOT}'"
	mkdir -p "${BUILDROOT}" || die "Cannot create '${BUILDROOT}'"
}

extract() {
	local f

	for f in "${SOURCESROOT}"/*; do
		local extra=""
		echo "Extract '$f'"
		echo "$f" | grep -q '\.bz2' && extra="${extra}j"
		echo "$f" | grep -q '\.gz' && extra="${extra}z"
		tar -C "${BUILDROOT}" -x${extra}f "${f}" || die "Extract '${f}'"
	done

	for f in "${PATCHDIR}"/*; do
		product="$(echo "${f}" | sed -e 's#.*/##g' -e 's/-.*//g')"
		if [ -d "${BUILDROOT}/${product}"* ]; then
			echo "Patch: '$f'"
			patch -d "${BUILDROOT}/${product}"* -p1 < "${f}" || die "Patch '${f}'"
		fi
	done
}

build_dep() {
	echo "Build zlib"
	cd "${BUILDROOT}/zlib"* || die "cd zlib"
	if [ -n "${BUILD_FOR_WINDOWS}" ]; then
		${MAKE} -f win32/Makefile.gcc \
			PREFIX=${CHOST:+${CHOST}-} \
			INCLUDE_PATH="${OPENSC_ROOT}/include" \
			LIBRARY_PATH="${OPENSC_ROOT}/lib" \
			BINARY_PATH="${OPENSC_ROOT}/bin" \
			install || \
			die "make zlib"
	else
		CHOST="${CHOST}" LDCONFIG=true ./configure --shared --prefix=/ || die "configure zlib"
		${MAKE} ${MAKE_AUTOCONF_INSTALL_TARGET} DESTDIR="${OPENSC_ROOT}" || die "make zlib"
	fi

	echo "Build libtool"
	cd "${BUILDROOT}/libtool"* || die "cd libtool"
	./configure ${CONFIGOPTS} ${EXTRA_LIBTOOL_CONFIG} || die "Configure libtool"
	${MAKE} ${MAKEOPTS} ${MAKE_AUTOCONF_INSTALL_TARGET} DESTDIR="${OPENSC_ROOT}" || die "make opensc"
	fixup_la

	echo "Build openssl"
	cd "${BUILDROOT}/openssl"* || die "cd openssl"

	./Configure --prefix="//" --cross-compile-prefix=${CHOST:+${CHOST}-} \
		no-zlib shared $(CHOST="${CHOST}" "${SCRIPTROOT}/gentoo.config-0.9.8") \
		no-capieng \
		--openssldir=/etc/ssl \
		${EXTRA_OPENSSL_CONFIG} \
		|| die "Configure openssl"
	if [ -n "${BUILD_FOR_WINDOWS}" ]; then
		perl util/mkdef.pl crypto update
		perl util/mkdef.pl ssl update
	fi
	${MAKE} depend install INSTALL_PREFIX="${OPENSC_ROOT}" INSTALLTOP="/" MANDIR="/tmp" \
		|| die "make openssl"
	rm -fr "${OPENSC_ROOT}/tmp"

	fixup_la

	cd "${SCRIPTROOT}"
	restore_la
}

build_opensc() {
	fixup_la

	local extra_opensc
	echo "${OPENSC_COMPONENTS}" | grep pcsc > /dev/null && extra_opensc="${extra_opensc} --enable-pcsc"

	if echo "${OPENSC_COMPONENTS}" | grep openct > /dev/null; then
		extra_opensc="${extra_opensc} --enable-openct"

		echo "Build openct"
		cd "${BUILDROOT}/openct"* || die "cd openct"
		./configure ${CONFIGOPTS} ${EXTRA_OPENCT_CONFIG} \
			${extra_opensc} --enable-doc \
			|| die "Configure openct"
		${MAKE} ${MAKEOPTS} ${MAKE_AUTOCONF_INSTALL_TARGET} DESTDIR="${OPENSC_ROOT}" || die "make openct"

		fixup_la
	fi

	echo "Build opensc"
	cd "${BUILDROOT}/opensc"* || die "cd opensc"
	./configure ${CONFIGOPTS} ${EXTRA_OPENSC_CONFIG} \
		--enable-openssl --enable-zlib ${extra_opensc} --enable-doc \
		|| die "Configure opensc"
	${MAKE} ${MAKEOPTS} ${MAKE_AUTOCONF_INSTALL_TARGET} DESTDIR="${OPENSC_ROOT}" || die "make opensc"

	fixup_la

	cd "${SCRIPTROOT}"
	restore_la
}

build_engine_pkcs11() {

	fixup_la

	echo "Build libp11"
	cd "${BUILDROOT}/libp11"* || die "cd libp11"
	./configure ${CONFIGOPTS} ${EXTRA_LIBP11_CONFIG} \
		--enable-doc \
		|| die "Configure libp11"
	${MAKE} ${MAKEOPTS} ${MAKE_AUTOCONF_INSTALL_TARGET} DESTDIR="${ENGINE_PKCS11_ROOT}" || die "make libp11"

	fixup_la

	echo "Build engine_pkcs11"
	cd "${BUILDROOT}/engine_pkcs11"* || die "cd engine_pkcs11"
	./configure ${CONFIGOPTS} ${EXTRA_ENGINE_PKCS11_CONFIG} \
		--enable-doc \
		--with-enginesdir="/lib/engines" \
		|| die "Configure engine_pkcs11"
	${MAKE} ${MAKEOPTS} ${MAKE_AUTOCONF_INSTALL_TARGET} DESTDIR="${ENGINE_PKCS11_ROOT}" || die "make engine_pkcs11"

	fixup_la

	cd "${SCRIPTROOT}"
	restore_la
}

build_openvpn() {

	fixup_la

	echo "Build lzo"
	cd "${BUILDROOT}/lzo"* || die "cd lzo"
	./configure ${CONFIGOPTS} ${EXTRA_LZO_CONFIG} \
		|| die "Configure lzo"
	${MAKE} ${MAKEOPTS} ${MAKE_AUTOCONF_INSTALL_TARGET} DESTDIR="${OPENVPN_ROOT}" || die "make lzo"

	fixup_la

	echo "Build pkcs11-helper"
	cd "${BUILDROOT}/pkcs11-helper"* || die "cd pkcs11-helper"
	./configure ${CONFIGOPTS} ${EXTRA_PKCS11_HELPER_CONFIG} \
		--disable-crypto-engine-gnutls \
		--disable-crypto-engine-nss \
		|| die "Configure pkcs11-helper"
	${MAKE} ${MAKEOPTS} ${MAKE_AUTOCONF_INSTALL_TARGET} DESTDIR="${OPENVPN_ROOT}" || die "make pkcs11-helper"

	fixup_la

	echo "Build openvpn"
	cd "${BUILDROOT}/openvpn"* || die "cd openvpn"
	./configure ${CONFIGOPTS} ${EXTRA_OPENVPN_CONFIG} \
		CPPFLAGS="-I${OPENSC_ROOT}/include -I${OPENVPN_ROOT}/include" \
		LDFLAGS="-L${OPENSC_ROOT}/lib -L${OPENVPN_ROOT}/lib" \
		OPENSSL_LIBS="${OPENSSL_FULL_LIBS}" \
		|| die "Configure openvpn"
	${MAKE} ${MAKEOPTS} ${MAKE_AUTOCONF_INSTALL_TARGET} DESTDIR="${OPENVPN_ROOT}" || die "make openvpn"

	fixup_la

	cd "${SCRIPTROOT}"
	restore_la
}

copy_docs() {
	echo "Copying documents"
	mkdir -p "${OPENSC_ROOT}/share/doc/package"
	cp "${SCRIPTROOT}/README" "${SCRIPTROOT}/COPYING"* "${OPENSC_ROOT}/share/doc/package" || die "package docs"
}

copy_sources() {
	echo "Copying sources"
	mkdir -p "${IMAGEROOT}/src/patches"
	cp "${SOURCESROOT}"/* "${IMAGEROOT}/src" || die "sources"
	cp "${PATCHDIR}"/* "${IMAGEROOT}/src/patches" || die "patches"
}

clean_empty_dirs() {
	echo "Cleaning empty directories"
	find "${IMAGEROOT}" -type d | sort -r | xargs rmdir 2> /dev/null
}

pack() {
	echo "Packing images"
	local X="${CHOST:-$(gcc -dumpmachine)}"
	(cd ../../windows.old/trunk/image && find src ) | bzip2 > "${IMAGEROOT}/opensc-${X}-${BUILD_VERSION}-srclist.bz2" || die "srclist"
	tar -cjf "${IMAGEROOT}/opensc-${X}-${BUILD_VERSION}-src.tar.bz2" -C "${IMAGEROOT}" src || die "src"
	tar -cjf "${IMAGEROOT}/opensc-${X}-${BUILD_VERSION}-base.tar.bz2" -C "${OPENSC_ROOT}" . || die "base"
	tar -cjf "${IMAGEROOT}/opensc-${X}-${BUILD_VERSION}-engine_pkcs11.tar.bz2" -C "${ENGINE_PKCS11_ROOT}" . || die "engine_pkcs11"
	tar -cjf "${IMAGEROOT}/opensc-${X}-${BUILD_VERSION}-openvpn.tar.bz2" -C "${OPENVPN_ROOT}" . || die "openvpn"
}

SCRIPTROOT="$(get_my_dir)"

#CHOST
#CTARGET
CBUILD="${CBUILD:-${CHOST}}"
IMAGEROOT="${IMAGEROOT:-${SCRIPTROOT}/image}"
BUILDROOT="${BUILDROOT:-${SCRIPTROOT}/tmp}"
SOURCESROOT="${SOURCESROOT:-${SCRIPTROOT}/sources}"
PATCHDIR="${SCRIPTROOT}/patches"
echo "${CHOST:-$(gcc -dumpmachine)}" | grep mingw > /dev/null && BUILD_FOR_WINDOWS=1

CONFIGOPTS=" \
	--prefix=/ \
	--sbindir=/bin \
	--host=${CHOST} \
	--target=${CTARGET} \
	--build=${CBUILD} \
	--program-prefix='' \
"

. "${SCRIPTROOT}/build.vars" || die "Cannot source build.vars"

OPENSC_ROOT="${IMAGEROOT}/opensc"
ENGINE_PKCS11_ROOT="${IMAGEROOT}/engine_pkcs11"
OPENVPN_ROOT="${IMAGEROOT}/openvpn"

if [ "${DO_STRIP}" = "1" ]; then
	MAKE_AUTOCONF_INSTALL_TARGET="install-strip"
else
	MAKE_AUTOCONF_INSTALL_TARGET="install"
fi

export LTLIB_CFLAGS="-I${OPENSC_ROOT}/include"
export LTLIB_LIBS="-L${OPENSC_ROOT}/lib -lltdl"
export ZLIB_CFLAGS="${LTLIB_CFLAGS}"
export ZLIB_LIBS="-L${OPENSC_ROOT}/lib -lz"
export OPENSSL_CFLAGS="${LTLIB_CFLAGS}"
export OPENSSL_LIBS="-L${OPENSC_ROOT}/lib -lcrypto"
export OPENSSL_FULL_LIBS="-L${OPENSC_ROOT}/lib -lssl -lcrypto"
export OPENCT_CFLAGS="${LTLIB_CFLAGS}"
export OPENCT_LIBS="-L${OPENSC_ROOT}/lib -lopenct"
export LIBP11_CFLAGS="-I${ENGINE_PKCS11_ROOT}/include"
export LIBP11_LIBS="-L${ENGINE_PKCS11_ROOT}/lib -lp11"
export LZO_CFLAGS="-I${OPENVPN_ROOT}/include"
export LZO_LIBS="-L${OPENVPN_ROOT}/lib -llzo2"
export PKCS11_HELPER_CFLAGS="-I${OPENVPN_ROOT}/include"
export PKCS11_HELPER_LIBS="-L${OPENVPN_ROOT}/lib -lpkcs11-helper"

if [ -n "${BUILD_FOR_WINDOWS}" ]; then
	OPENSC_COMPONENTS="pcsc"
	export PKG_CONFIG="true"
	export MAN2HTML="true"
	export ZLIB_LIBS="-L${OPENSC_ROOT}/lib -lzdll"
fi

download
create_layout
extract
build_dep
build_opensc
build_engine_pkcs11
build_openvpn
copy_docs
copy_sources
clean_empty_dirs
pack

exit 0
