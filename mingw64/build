#!/bin/sh

die() {
	local m="$1"
	echo "FATAL: ${m}" >&2
	exit 1
}

get_full_path() {
	local d="$1"
	( cd "${d}" 2> /dev/null && pwd || echo "${d}" )
}

CHOST="x86_64-pc-mingw32"
MAKE="${MAKE:-make}"
MAKEOPTS="${MAKEOPTS:--j2}"
SCRIPTROOT="$(get_full_path "$(dirname "$0")")"
BUILDROOT="${BUILDROOT:-${SCRIPTROOT}/tmp}"
SOURCESROOT="${SOURCESROOT:-${SCRIPTROOT}/sources}"
SYSROOT="${SCRIPTROOT}/sysroot"
TOOLCHAIN_ROOT="${SCRIPTROOT}/toolchain"

MPFR_SRC="${MPFR_SRC:-${SOURCESROOT}/mpfr-2.4.0}"
GMP_SRC="${GMP_SRC:-${SOURCESROOT}/gmp-4.2.2}"
BINUTILS_SRC="${BINUTILS_SRC:-${SOURCESROOT}/binutils}"
GCC_SRC="${GCC_SRC:-${SOURCESROOT}/gcc-4.3.2}"
MINGW_W64_SRC="${MINGW_W64_SRC:-${SOURCESROOT}/mingw-w64}"

MPFR_SRC="$(get_full_path "${MPFR_SRC}")"
GMP_SRC="$(get_full_path "${GMP_SRC}")"
BINUTILS_SRC="$(get_full_path "${BINUTILS_SRC}")"
GCC_SRC="$(get_full_path "${GCC_SRC}")"
MINGW_W64_SRC="$(get_full_path "${MINGW_W64_SRC}")"

rm -fr "${BUILDROOT}" "${SYSROOT}" "${TOOLCHAIN_ROOT}" || die "clean"

for d in \
	"${BINUTILS_SRC}" \
	"${GCC_SRC}" \
	"${MPFR_SRC}" \
	"${GMP_SRC}" \
	"${MINGW_W64_SRC}"; do

	[ -d "${d}" ] || die "Directory '${d}' should exist"

	if [ -n "${DO_UPDATE}" ]; then
		if [ -d "${d}/CVS" ]; then
			( cd "${d}"; cvs update ) || die "cvs.update '${d}'"
		fi
		if [ -d "${d}/.svn" ]; then
			svn update "${d}" || die "svn.update '${d}'"
			[ -e "${d}"/contrib/gcc_update ] && \
				( cd "${d}"; ./contrib/gcc_update --touch )
		fi
	fi
done

mkdir -p "${BUILDROOT}/mpfr"
cd "${BUILDROOT}/mpfr"
"${MPFR_SRC}/configure" \
	--prefix="${TOOLCHAIN_ROOT}" ||
	die "mpfr.configure"
${MAKE} ${MAKEOPTS} || die "mpfr.make"
${MAKE} ${MAKEOPTS} install || die "mpfr.install"

mkdir -p "${BUILDROOT}/gmp"
cd "${BUILDROOT}/gmp"
"${MPFR_SRC}/configure" \
	--prefix="${TOOLCHAIN_ROOT}" ||
	die "gmp.configure"
${MAKE} ${MAKEOPTS} || die "gmp.make"
${MAKE} ${MAKEOPTS} install || die "gmp.install"

mkdir -p "${BUILDROOT}/binutils"
cd "${BUILDROOT}/binutils"
"${BINUTILS_SRC}/configure" \
	--target="${CHOST}" \
	--prefix="${TOOLCHAIN_ROOT}" \
	--with-sysroot="${SYSROOT}" \
	--without-x \
	--disable-gdbtk \
	|| die "binutils.configure"
${MAKE} ${MAKEOPTS} all-host || die "binutils.make.1"
${MAKE} ${MAKEOPTS} install-host || die "binutils.install.1"

svn export "${MINGW_W64_SRC}/mingw-w64-headers/include" "${TOOLCHAIN_ROOT}/${CHOST}/include" || die "mingw-w64-headers.install"
mkdir -p "${SYSROOT}"
ln -s "${TOOLCHAIN_ROOT}/${CHOST}" "${SYSROOT}/mingw" || die "ln"

mkdir -p "${BUILDROOT}/gcc"
cd "${BUILDROOT}/gcc"
"${GCC_SRC}/configure" \
	--target="${CHOST}" \
	--prefix="${TOOLCHAIN_ROOT}" \
	--with-sysroot="${SYSROOT}" \
	--enable-languages="c,c++" \
	--with-mpfr="${TOOLCHAIN_ROOT}" \
	--with-gmp="${TOOLCHAIN_ROOT}" \
	|| die "gcc.configure"
${MAKE} ${MAKEOPTS} all-gcc || die "gcc.make.1"
${MAKE} ${MAKEOPTS} install-gcc || die "gcc.install.1"

export PATH="${TOOLCHAIN_ROOT}/bin:${PATH}"

mkdir -p "${BUILDROOT}/mingw-w64-crt"
cd "${BUILDROOT}/mingw-w64-crt"
"${MINGW_W64_SRC}/mingw-w64-crt/configure" \
	--host="${CHOST}" \
	--prefix="${TOOLCHAIN_ROOT}" \
	--with-sysroot="${SYSROOT}" \
	|| die "mingw-w64-crt.configure"
${MAKE} ${MAKEOPTS} || die "mingw-w64-crt.make"
${MAKE} ${MAKEOPTS} install || die "mingw-w64-crt.install"

cd "${BUILDROOT}/gcc"
${MAKE} ${MAKEOPTS} || die "gcc.make"
${MAKE} ${MAKEOPTS} install || die "gcc.install"
